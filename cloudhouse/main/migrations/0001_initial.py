# Generated by Django 4.2 on 2023-05-24 19:13

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Addresses',
            fields=[
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'addresses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('surname', models.CharField(blank=True, max_length=45, null=True)),
                ('patronymic', models.CharField(blank=True, max_length=45, null=True)),
                ('mobile', models.CharField(blank=True, max_length=12, null=True)),
                ('email', models.CharField(blank=True, max_length=70, null=True)),
                ('uncpass', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиент',
                'db_table': 'clients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Contracts',
            fields=[
                ('code_contract', models.AutoField(primary_key=True, serialize=False)),
                ('contract_start', models.DateField(blank=True, null=True)),
                ('contract_payment', models.DateField(blank=True, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'verbose_name': 'Договор',
                'verbose_name_plural': 'Договор',
                'db_table': 'contracts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Devices',
            fields=[
                ('device_id', models.AutoField(primary_key=True, serialize=False)),
                ('device_name', models.CharField(blank=True, max_length=45, null=True)),
                ('device_description', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('status', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройство',
                'db_table': 'devices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EnergySensors',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor_name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('lastpar_date', models.DateField(blank=True, null=True)),
                ('lastpar_time', models.TimeField(blank=True, null=True)),
                ('sensor_result_energy', models.FloatField(blank=True, null=True)),
                ('sensor_result_voltage', models.IntegerField(blank=True, null=True)),
                ('sensor_type', models.CharField(blank=True, max_length=50, null=True)),
                ('max_energy', models.FloatField(blank=True, null=True)),
                ('min_energy', models.FloatField(blank=True, null=True)),
                ('max_voltage', models.IntegerField(blank=True, null=True)),
                ('min_voltage', models.IntegerField(blank=True, null=True)),
                ('favorite', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Датчик электросбережения',
                'verbose_name_plural': 'Датчик электросбережения',
                'db_table': 'energy_sensors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('favorit_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Избранные',
                'verbose_name_plural': 'Избранные',
                'db_table': 'favorites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LightSensors',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor_name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('lastpar_date', models.DateField(blank=True, null=True)),
                ('lastpar_time', models.TimeField(blank=True, null=True)),
                ('light_result', models.IntegerField(blank=True, null=True)),
                ('sensor_type', models.CharField(blank=True, max_length=50, null=True)),
                ('favorite', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Датчик света',
                'verbose_name_plural': 'Датчик света',
                'db_table': 'light_sensors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_type', models.CharField(blank=True, max_length=45, null=True)),
                ('notification_description', models.TextField(blank=True, null=True)),
                ('notification_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Уведомления',
                'verbose_name_plural': 'Уведомления',
                'db_table': 'notifications',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReportSensorsParams',
            fields=[
                ('report_sensors_params_id', models.AutoField(primary_key=True, serialize=False)),
                ('float_param', models.FloatField(blank=True, null=True)),
                ('bool_param', models.IntegerField(blank=True, null=True)),
                ('int_param', models.IntegerField(blank=True, null=True)),
                ('date_param', models.DateField(blank=True, null=True)),
                ('time_param', models.TimeField(blank=True, null=True)),
                ('type_sensor', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Отчётные данные датчиков',
                'verbose_name_plural': 'Отчётные данные датчиков',
                'db_table': 'report_sensors_params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TemperatureSensors',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor_name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('lastpar_date', models.DateField(blank=True, null=True)),
                ('lastpar_time', models.TimeField(blank=True, null=True)),
                ('temperature_result', models.IntegerField(blank=True, null=True)),
                ('sensor_type', models.CharField(blank=True, max_length=50, null=True)),
                ('max_temperature', models.IntegerField(blank=True, null=True)),
                ('min_temperature', models.IntegerField(blank=True, null=True)),
                ('favorite', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Датчик температуры',
                'verbose_name_plural': 'Датчик температуры',
                'db_table': 'temperature_sensors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id_setting', models.AutoField(primary_key=True, serialize=False)),
                ('device_start_stop', models.IntegerField(blank=True, null=True)),
                ('email_message', models.IntegerField(blank=True, null=True)),
                ('time_sensors', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Настройки аккаунта',
                'verbose_name_plural': 'Настройки аккаунта',
                'db_table': 'user_settings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VoiceSensors',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor_name', models.CharField(blank=True, max_length=45, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('lastpar_date', models.DateField(blank=True, null=True)),
                ('lastpar_time', models.TimeField(blank=True, null=True)),
                ('voice_result', models.IntegerField(blank=True, null=True)),
                ('sensor_type', models.CharField(blank=True, max_length=50, null=True)),
                ('voice_min', models.IntegerField(blank=True, null=True)),
                ('voice_max', models.IntegerField(blank=True, null=True)),
                ('favorite', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Датчик звука',
                'verbose_name_plural': 'Датчик звука',
                'db_table': 'voice_sensors',
                'managed': False,
            },
        ),
    ]
